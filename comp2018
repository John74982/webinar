ISC2018_1

/*A Goldbach number is a positive even integer that can be expressed as the sum of two odd primes.
Note: All even integer numbers greater than 4 are Goldbach numbers.

Example:
6 = 3 + 3
10 = 3 + 7
10 = 5 + 5

Hence, 6 has one odd prime pair 3 and 3. Similarly, 10 has two odd prime pairs, i.e. 3, 7 and 5, 5.
Write a program to accept an even integer ‘N’ where N > 9 and N < 50. Find all the odd prime pairs whose sum is equal to the number ‘N’.
Test your program with the following data and some random data:

Example 1:
INPUT:
N = 14
OUTPUT:
Prime pairs are:
3, 11
7, 7

Example 2:
INPUT:
N = 30
OUTPUT:
Prime numbers are:
7, 23
11, 19
13, 17

Example 3:
INPUT:
N = 17
OUTPUT:
Invalid input. Number is odd.

Example 4:
INPUT:
N = 126
OUTPUT:
Invalid input. Number is out of range.
*/

import java.util.*;
class Goldbach_isc2018_1
{
    public static void main(String args[])
    {
        int n = 0,p = 3,q = 0;
        Scanner sc= new Scanner(System.in);
        System.out.print("N = ");
        n = sc.nextInt();
        if(n % 2 != 0)
        {
            System.out.println("Invalid input. Number is odd.");
            return;
        }
        else if(n < 10 || n > 49){
            System.out.println("Invalid input. Number is out of range.");
            return;
        }
        System.out.println("Prime pairs are:");
        while(p < n)
        {
            q = n - p;
            if(isPrime(p) && isPrime(q) && p <= q)
                System.out.println(p + ", " + q);
            p += 2;
        }
    }
    public static boolean isPrime(int n)
    {
        int f = 0,i;
        for(i = 1; i <= n; i++)
        {
            if(n % i == 0)
                f++;
        }
        if(f == 2)
        return true;
            else
        return false;
    }
}

ISC2018_2

/*Write a program to declare a matrix a[][] of order (m × n) where ‘m’ is the number of rows and ‘n’ is the number of columns such that the values of both ‘m’ and ‘n’ must be greater than 2 and less than 10. Allow the user to input integers into this matrix. Perform the following tasks on the matrix:

Display the original matrix.
Sort each row of the matrix in ascending order using any standard sorting technique.
Display the changed matrix after sorting each row.
Test your program for the following data and some random data:

Example 1:
INPUT:
m = 4
n = 3
Enter elements of matrix:

11   -2    3
5    16    7
9    0     4
3    1     8
OUTPUT:
Original Matrix:

11   -2    3
5    16    7
9    0     4
3    1     8
Matrix after sorting rows:

-2    3    11
5     7    16
0     4     9
1     3     8
Example 2:
INPUT:
m = 3
n = 3
Enter elements of matrix:

22    5    19
7     36   12
9     13   6
OUTPUT:
Original matrix:

22    5    19
7     36   12
9     13   6
Matrix after sorting rows:

5     19   22
7     12   36
6     9    13
Example 3:
INPUT:
m = 11
n = 5
OUTPUT:
Matrix size out of range.
*/

import java.util.*;
class MatrixSort_isc2018_2
{
    public static void main(String args[])
   {
        Scanner sc=new Scanner(System.in);
        int m ,n ,i,j,k=0;
        System.out.print("M = ");
        m = sc.nextInt();
        System.out.print("N = ");
        n = sc.nextInt();
        
        if(m <= 2 || m >= 10 || n <= 2 || n >= 10)
        {
            System.out.println("Matrix size out of range.");
            return;
        }
        int a[][]=new int[m][n];
        int temp[] = new int[m * n];
        System.out.println("Enter elements of matrix:");
        for(i = 0; i < m; i++)
        {
            for(j = 0; j < n; j++)
            {
                a[i][j] = sc.nextInt();
                temp[k++] = a[i][j];
            }
        }
        System.out.println("Original Matrix:");
        for(i = 0; i < m; i++)
        {
            for(j = 0; j < n; j++)
            {
                System.out.print(a[i][j] + "\t");
            }
            System.out.println();
        }
        for(i = 0; i < temp.length; i++)
        {
            for(j = 0; j < temp.length - 1 - i; j++)
            { 
                if(temp[j] > temp[j + 1])
                {
                    int t = temp[j];
                    temp[j] = temp[j + 1];
                    temp[j + 1] = t;
                }
            }
        }
        k = 0;
        for(i = 0; i < m; i++)
            for(j = 0; j < n; j++)
                a[i][j] = temp[k++];
        System.out.println("Matrix after sorting rows:");
        for(i = 0; i < m; i++)
        {
            for(j = 0; j < n; j++)
            {
                System.out.print(a[i][j] + "\t");
            }
            System.out.println();
        }
    }
}

ISC2018_3

/*The names of the teams participating in a competition should be displayed on a banner vertically, to accommodate as many teams as possible in a single banner.
Design a program to accept the names of N teams, where 2 < N < 9 and display them in vertical order, side by side with a horizontal tab (i.e. eight spaces).
Test your program for the following data and some random data:

Example 1:
INPUT:
N = 3
Team 1: Emus
Team 2: Road Rols
Team 3: Coyote
OUTPUT:

E        R        C
m        o        o
u        a        y
s        d        o
                  t
         R        e
         o
         l
         s
Example 2:
INPUT:
N = 4
Team 1: Royal
Team 2: Mars
Team 3: De Rose
Team 4: Kings
OUTPUT:

R        M        D        K
o        a        e        i
y        r                 n
a        s        R        g
l                 o        s
                  s
                  e
Example 3:
INPUT:
N = 10
OUTPUT:
Invalid input.
*/

import java.util.*;
class Banner_isc2018_3
{
    public static void main(String args[])
    {
        Scanner sc= new Scanner(System.in);
        int n = 0,i,len=0,j;
        
        System.out.print("N = ");
        n = sc.nextInt();
        if(n <= 2 || n >= 9)
        {
            System.out.println("Invalid input.");
            return;
        }
        String a[] = new String[n];
        for(i = 0; i < n; i++)
        {
            Scanner sc1= new Scanner(System.in);
            System.out.print("Team " + (i + 1) + ": ");
            a[i] = sc1.nextLine();
            if(len < a[i].length())
                len = a[i].length();
        }
        for(i = 0; i < len; i++)
        {
            for(j = 0; j < n; j++)
            {
                if(i < a[j].length())
                    System.out.print(a[j].charAt(i) + "\t");
                else
                    System.out.print("\t");
            }
            System.out.println();
        }
    }
}

