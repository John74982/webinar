program 1:

import java.util.*;
class date_specimen21{
    public static void main(String args[])
    {

        Scanner scan=new Scanner(System.in);
        System.out.println("ENTER DAY NUMER(>=1 AND<=366) : ");
        int day_number=scan.nextInt();
        System.out.println("ENTER YEAR(4 DIGIT) : ");
        int year=scan.nextInt();
        System.out.println("ENTER DATE AFTER(N)(>=1 AND<=100) : ");
        int n=scan.nextInt();

        if(day_number<1 || day_number>366)
            System.out.println("INVALID DAY NUMBER.");
        else if(year<1000 || year >9999)
            System.out.println("INVALID YEAR");
        else if(n<1 || n>100)
            System.out.println("INVALID DATE AFTER VALUE.");
        else{
            //INITIALIZE MONTH NAMES AND NUMBER OF DAYS IN EACH MONTH
            String month_names[]={"JANUARY", "FEBRUARY","MARCH",
                    "APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER",
                    "OCTOBER","NOVERMBER","DECEMBER"};
            int month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
            int i, day, month,day_after;
            String suffix;

            //IF IT IS A LEAP YEAR FEBRURAY SHOULD HAVE 29 DAYS
            if(year%400==0 || (year%100!=0 && year%4==0))
                month_days[1]=29;

            i=0;
            //FIND THE DATE CORRESPONDING TO THE DAY NUMBER
            day=day_number;
            while(day>month_days[i])
            {
                day-=month_days[i];
                i++;
            }
            month=i;
            //ADD SUFFIX AS PER THE DAY
            if(day%10==1 && day/10!=1)
                suffix="ST";
            else if(day%10==2 && day/10!=1)
                suffix="ND";
            else if(day%10==3 && day/10!=1)
                suffix="RD";
            else
                suffix="TH";
            System.out.println("OUTPUT:");
            //FIRST PART OF THE OUTPUT
            System.out.println(day+suffix+" "+
                month_names[month]+" "+year);

            //TO CALCULATE DATE AFTER N DAYS
            day_after=day_number+n;
            i=0;
            while(day_after>month_days[i])
            {
                day_after-=month_days[i];
                i++;
                if(i==12){
                    i=0;
                    year++;
                    if(year%400==0 || (year%100!=0 && year%4==0))
                        month_days[1]=29;
                }
            }
            day=day_after;
            month=i;
            //ADD SUFFIX AS PER THE DAY
            if(day%10==1 && day/10!=1)
                suffix="ST";
            else if(day%10==2 && day/10!=1)
                suffix="ND";
            else if(day%10==3 && day/10!=1)
                suffix="RD";
            else
                suffix="TH";
            //SECOND PART OF THE OUTPUT
            System.out.println("DATE AFTER "+ n + " DAYS : ");
            System.out.println(day+suffix+" "+
                month_names[month]+" "+year);
        }
    }
}

program 2:

import java.util.Scanner;
class Mobius_specimen21{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        System.out.print("N = ");
        int n = Integer.parseInt(in.nextLine());
        int m = mob(n);
        System.out.println("M(" + n + ") = " + m);
    }
    public static int mob(int n){
        int pf = 2;
        int total = 0;
        boolean distinct = true;
        if(n == 1){
            System.out.println("NO PRIME FACTORS");
            return 1;
        }
        while(n > 1){
            int count = 0;
            while(n % pf == 0){
                n /= pf;
                System.out.print(pf);
                count++;
                total++;
                if(count > 1)
                    distinct = false;
                if(n > 1)
                    System.out.print(" x ");
            }
            pf++;
        }
        System.out.println();
        if(distinct){
            System.out.println("NUMBER OF DISTINCT PRIME FACTORS = " + total);
            if(total % 2 == 0)
                return 1;
            else
                return -1;
        }
        System.out.println("DUPLICATE PRIME FACTORS");
        return 0;
    }
}

program : 3

/*Write a program to accept a sentence which may be terminated by either ‘.’, ‘?’ or ‘!’ only. The words are to be separated by a single blank space and are in uppercase.

Perform the following tasks:

a) Check for the validity of the accepted sentence only for the terminating character.
b) Arrange the words in ascending order of their length. If two or more words have the same length, then sort them alphabetically.
c) Display the original sentence along with the converted sentence.

Test your program for the following data and some random data:

Example 1:
INPUT:
AS YOU SOW SO SHALL YOU REAP.
OUTPUT:
AS YOU SOW SO SHALL YOU REAP.
AS SO SOW YOU YOU REAP SHALL

Example 2:
INPUT:
SELF HELP IS THE BEST HELP.
OUTPUT:
SELF HELP IS THE BEST HELP.
IS THE BEST HELP HELP SELF.

Example 3:
INPUT:
BE KIND TO OTHERS.
OUTPUT:
BE KIND TO OTHERS.
BE TO KIND OTHERS

Example 4:
INPUT:
NOTHING IS IMPOSSIBLE#
OUTPUT:
INVALID INPUT
*/


import java.util.*;
class Arrange_ISC2020_3_ISC_SPECIMEN21
{
    public static void main(String args[])
    {
        Scanner sc= new Scanner(System.in);
        String s,temp;
        int len,count,i,j;
        char last;
        System.out.print("Enter Sentence: ");
        s = sc.nextLine().trim();
        s = s.toUpperCase();
        len = s.length();
        last = s.charAt(len - 1);
        if(last != '.' || last != '?' || last != '!')
           { 
             System.out.println("INVALID INPUT");
             System.exit(0);
            }
        System.out.println(s);
        StringTokenizer st = new StringTokenizer(s, "? .!,");
        count = st.countTokens();
        String a[] = new String[count];
        for(i = 0; i < count; i++)
            a[i] = st.nextToken();
        for(i = 0; i < a.length; i++)
        {
            for(j = 0; j < a.length - 1 - i; j++)
            {
                if(a[j].compareTo(a[j + 1]) > 0)
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
        for(i = 0; i < a.length; i++)
        {
            for(j = 0; j < a.length - 1 - i; j++)
            {
                if(a[j].length() > a[j + 1].length())
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
        for(i = 0; i < a.length; i++)
            System.out.print(a[i] + " ");
        System.out.println();
    }
}
