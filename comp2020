
ISC2020_1

/*A Prime-Adam integer is a positive integer (without leading zeroes) which is a prime as well as an Adam number.
Prime number: A number which has only two factors, i.e. 1 and the number itself. Example: 2, 3, 5, 7, etc.
Adam number: The square of a number and the square of its reverse are reverse to each other. Example: If n = 13 and reverse of ‘n’ is 31, then, 132 = 169, and 312 = 961 which is reverse of 169. Thus, 13 is an Adam number.
Accept two positive integers m and n, where m is less than n as user input. Display all Prime-Adam integers that are in the range between m and n (both inclusive) and output them along with the frequency, in the format given below:
Test your program with the following data and some random data:
Example 1:
INPUT:
m = 5
n = 100
OUTPUT:
The Prime-Adam integers are:
11, 13, 31
Frequency of Prime-Adam integers is: 3
Example 2:
INPUT:
m = 100
n = 200
OUTPUT:
The Prime-Adam integers are:
101, 103, 113
Frequency of Prime-Adam integers is: 3
Example 3:
INPUT:
m = 50
n = 70
OUTPUT:
The Prime-Adam integers are:
NIL
Frequency of Prime-Adam integers is: 0
Example 4:
INPUT:
m = 700
n = 450
OUTPUT:
Invalid Input.
*/

import java.util.*;
class PrimeAdam_ISC2020_1
{
    public static void main(String args[])
    {
        Scanner sc= new Scanner (System.in);
        System.out.print("m = ");
        int m = sc.nextInt();
        System.out.print("n = ");
        int n = sc.nextInt();
        if(m >= n)
        {
            System.out.println("Invalid input.");
            return;
        }
        int count = 0;
        System.out.println("The Prime-Adam integers are:");
        for(int i = m; i <= n; i++)
        {
            if(isPrime(i))
            {
                int rev = reverse(i);
                int s1 = i * i;
                int s2 = rev * rev;
                if(reverse(s1) == s2)
                {
                    if(count == 0)
                        System.out.print(i);
                    else
                        System.out.print(", " + i);
                    count++;
                }
            }
        }
        if(count == 0)
            System.out.println("NIL");
        else
            System.out.println();
        System.out.println("Frequency of Prime-Adam integers is: " + count);
    }

    public static boolean isPrime(int n)
    {
        int f = 0;
        for(int i = 1; i <= n; i++){
            if(n % i == 0)
                f++;
        }
        if(f==2)
        return true;
        else
        return false;
    }

    public static int reverse(int n)
    {
        int rev = 0;
        for(int i = n; i > 0; i /= 10)
            rev = rev * 10 + i % 10;
        return rev;
    }
}

ISC2020_2

/*Write a program to declare a matrix a[][] of order (M × N) where ‘M’ is the number of rows 
 * and ‘N’ is the number of columns such that the value of ‘M’ must be greater than 0 
 * and less than 10 and the value of ‘N’ must be greater than 2 and less than 6. 
 * Allow the user to input digits (0 – 7) only at each location, such that each row represents an octal number.

Example:
2 3 1 (decimal equivalent of 1st row = 153 i.e. 2 × 82 + 3 × 81 + 1 × 80)
4 0 5 (decimal equivalent of 2nd row = 261 i.e. 4 × 82 + 0 × 81 + 5 × 80)
1 5 6 (decimal equivalent of 3rd row = 110 i.e. 1 × 82 + 5 × 81 + 6 × 80)

Perform the following tasks on the matrix:
a) Display the original matrix.
b) Calculate the decimal equivalent for each row and display as per the format given below.

Test your program for the following data and some random data:

Example 1:
INPUT:
M = 1
N = 3
Enter elements for row 1: 1 4 4
OUTPUT:
Filled Matrix:
1 4 4
Decimal Equivalent:
100

Example 2:
INPUT:
M = 3
N = 4
Enter elements for row 1: 1 1 3 7
Enter elements for row 2: 2 1 0 6
Enter elements for row 3: 0 2 4 5
OUTPUT:
Filled Matrix:
1 1 3 7
2 1 0 6
0 2 4 5
Decimal Equivalent:
607
1094
165

Example 3:
INPUT:
M = 3
N = 3
Enter elements for row 1: 2 4 8
OUTPUT:
Invalid Input.

Example 4:
INPUT:
M = 4
N = 6
OUTPUT:
Out of range.
*/

import java.util.*;
class ToDecimal_ISC2020_2
{
    public static void main(String args[]){
        Scanner sc= new Scanner(System.in);
        int a[][],m,n,i,j,d,p;
        System.out.print(" Enter M (>0 and <10) = ");
        m = sc.nextInt();
        System.out.print("Enter N (>2 and <6) = ");
        n = sc.nextInt();
        if(m < 1 || m > 9 || n < 3 || n > 5)
        {
            System.out.println("Out of range.");
            return;
        }
        a = new int[m][n];
        for(i = 0; i < m; i++)
        {
            System.out.println("Enter elements for row " + (i + 1) + ":");
            for( j = 0; j < n; j++)
            {
                a[i][j] = sc.nextInt();
                if(a[i][j] < 0 || a[i][j] > 7)
                {
                    System.out.println("Invalid Input.");
                    return;
                }
            }
        }
        System.out.println("Filled Matrix:");
        for( i = 0; i < m; i++)
        {
            for( j = 0; j < n; j++)
            {
                System.out.print(a[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("Decimal Equivalent:");
        for( i = 0; i < m; i++)
        {
            d = 0;
             p = n - 1;
            for( j = 0; j < n; j++)
            {
                d += a[i][j] * (int)Math.pow(8, p);
                p--;
            }
            System.out.println(d);
        }
    }
}


ISC2020_3

/*Write a program to accept a sentence which may be terminated by either ‘.’, ‘?’ or ‘!’ only. The words are to be separated by a single blank space and are in uppercase.

Perform the following tasks:

a) Check for the validity of the accepted sentence only for the terminating character.
b) Arrange the words in ascending order of their length. If two or more words have the same length, then sort them alphabetically.
c) Display the original sentence along with the converted sentence.

Test your program for the following data and some random data:

Example 1:
INPUT:
AS YOU SOW SO SHALL YOU REAP.
OUTPUT:
AS YOU SOW SO SHALL YOU REAP.
AS SO SOW YOU YOU REAP SHALL

Example 2:
INPUT:
SELF HELP IS THE BEST HELP.
OUTPUT:
SELF HELP IS THE BEST HELP.
IS THE BEST HELP HELP SELF.

Example 3:
INPUT:
BE KIND TO OTHERS.
OUTPUT:
BE KIND TO OTHERS.
BE TO KIND OTHERS

Example 4:
INPUT:
NOTHING IS IMPOSSIBLE#
OUTPUT:
INVALID INPUT
*/


import java.util.*;
class Arrange_ISC2020_3_ISC_SPECIMEN21
{
    public static void main(String args[])
    {
        Scanner sc= new Scanner(System.in);
        String s,temp;
        int len,count,i,j;
        char last;
        System.out.print("Enter Sentence: ");
        s = sc.nextLine().trim();
        s = s.toUpperCase();
        len = s.length();
        last = s.charAt(len - 1);
        if(last != '.' || last != '?' || last != '!')
           { 
             System.out.println("INVALID INPUT");
             System.exit(0);
            }
        System.out.println(s);
        StringTokenizer st = new StringTokenizer(s, "? .!,");
        count = st.countTokens();
        String a[] = new String[count];
        for(i = 0; i < count; i++)
            a[i] = st.nextToken();
        for(i = 0; i < a.length; i++)
        {
            for(j = 0; j < a.length - 1 - i; j++)
            {
                if(a[j].compareTo(a[j + 1]) > 0)
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
        for(i = 0; i < a.length; i++)
        {
            for(j = 0; j < a.length - 1 - i; j++)
            {
                if(a[j].length() > a[j + 1].length())
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
        for(i = 0; i < a.length; i++)
            System.out.print(a[i] + " ");
        System.out.println();
    }
}
